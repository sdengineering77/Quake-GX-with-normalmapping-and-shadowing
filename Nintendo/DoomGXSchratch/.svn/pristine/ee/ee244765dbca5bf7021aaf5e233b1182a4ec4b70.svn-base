/*
===========================================================================

Doom 3 GPL Source Code
Copyright (C) 1999-2011 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 GPL Source Code (?Doom 3 Source Code?).  

Doom 3 Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "../idlib/precompiled.h"
#pragma hdrstop

idCVar idEventLoop::com_journal( "com_journal", "0", CVAR_INIT|CVAR_SYSTEM, "1 = record journal, 2 = play back journal", 0, 2, idCmdSystem::ArgCompletion_Integer<0,2> );

idEventLoop eventLoopLocal;
idEventLoop *eventLoop = &eventLoopLocal;


/*
=================
idEventLoop::idEventLoop
=================
*/
idEventLoop::idEventLoop( void ) {
#ifdef TRACE_CONSTRUCTS
    Sys_DebugPrintf("idEventLoop::idEventLoop( void ) size %d\r\n", sizeof(*this));
#endif

	com_journalFile = NULL;
	com_journalDataFile = NULL;
	initialTimeOffset = 0;
}

/*
=================
idEventLoop::~idEventLoop
=================
*/
idEventLoop::~idEventLoop( void ) {
}

/*
=================
idEventLoop::GetRealEvent
=================
*/
sysEvent_t	idEventLoop::GetRealEvent( void ) {
    sysEvent_t retVal;
    memset(&retVal, 0, sizeof(sysEvent_t));
    Sys_Printf("sysEvent_tidEventLoop::GetRealEvent( void )\r\n");
    return retVal;
}


/*
=================
idEventLoop::PushEvent
=================
*/
void idEventLoop::PushEvent( sysEvent_t *event ) {
    Sys_Printf("void idEventLoop::PushEvent( sysEvent_t *event )\r\n");
}


/*
=================
idEventLoop::GetEvent
=================
*/
sysEvent_t idEventLoop::GetEvent( void ) {
    sysEvent_t retVal;
    memset(&retVal, 0, sizeof(sysEvent_t));
    Sys_Printf("sysEvent_t idEventLoop::GetEvent( void )\r\n");
    return retVal;
}


/*
=================
idEventLoop::ProcessEvent
=================
*/
void idEventLoop::ProcessEvent( sysEvent_t ev ) {
    Sys_Printf("void idEventLoop::ProcessEvent( sysEvent_t ev )\r\n");
}


/*
===============
idEventLoop::RunEventLoop
===============
*/
int idEventLoop::RunEventLoop( bool commandExecution ) {
    int retVal;
    memset(&retVal, 0, sizeof(int));
    Sys_Printf("int idEventLoop::RunEventLoop( bool commandExecution )\r\n");
    return retVal;
}


/*
=============
idEventLoop::Init
=============
*/
void idEventLoop::Init( void ) {
    Sys_Printf("void idEventLoop::Init( void )\r\n");
}


/*
=============
idEventLoop::Shutdown
=============
*/
void idEventLoop::Shutdown( void ) {
    Sys_Printf("void idEventLoop::Shutdown( void )\r\n");
}


/*
================
idEventLoop::Milliseconds

Can be used for profiling, but will be journaled accurately
================
*/
int idEventLoop::Milliseconds( void ) {
    int retVal;
    memset(&retVal, 0, sizeof(int));
    Sys_Printf("int idEventLoop::Milliseconds( void )\r\n");
    return retVal;
}


/*
================
idEventLoop::JournalLevel
================
*/
int idEventLoop::JournalLevel( void ) const {
    int retVal;
    memset(&retVal, 0, sizeof(int));
    Sys_Printf("int idEventLoop::JournalLevel( void )\r\n");
    return retVal;
}

