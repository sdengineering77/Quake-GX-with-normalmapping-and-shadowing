/*
===========================================================================

Doom 3 GPL Source Code
Copyright (C) 1999-2011 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 GPL Source Code (?Doom 3 Source Code?).  

Doom 3 Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "../idlib/precompiled.h"
#pragma hdrstop

#include "ListGUILocal.h"
#include "DeviceContext.h"
#include "Window.h"
#include "UserInterfaceLocal.h"

extern idCVar r_skipGuiShaders;		// 1 = don't render any gui elements on surfaces

idUserInterfaceManagerLocal	uiManagerLocal;
idUserInterfaceManager *	uiManager = &uiManagerLocal;

/*
===============================================================================

	idUserInterfaceManagerLocal

===============================================================================
*/

void idUserInterfaceManagerLocal::Init() {
    Sys_Printf("void idUserInterfaceManagerLocal::Init()\r\n");
}


void idUserInterfaceManagerLocal::Shutdown() {
    Sys_Printf("void idUserInterfaceManagerLocal::Shutdown()\r\n");
}


void idUserInterfaceManagerLocal::Touch( const char *name ) {
    Sys_Printf("void idUserInterfaceManagerLocal::Touch( const char *name )\r\n");
}


void idUserInterfaceManagerLocal::WritePrecacheCommands( idFile *f ) {
    Sys_Printf("void idUserInterfaceManagerLocal::WritePrecacheCommands( idFile *f )\r\n");
}


void idUserInterfaceManagerLocal::SetSize( float width, float height ) {
    Sys_Printf("void idUserInterfaceManagerLocal::SetSize( float width, float height )\r\n");
}


void idUserInterfaceManagerLocal::BeginLevelLoad() {
    Sys_Printf("void idUserInterfaceManagerLocal::BeginLevelLoad()\r\n");
}


void idUserInterfaceManagerLocal::EndLevelLoad() {
    Sys_Printf("void idUserInterfaceManagerLocal::EndLevelLoad()\r\n");
}


void idUserInterfaceManagerLocal::Reload( bool all ) {
    Sys_Printf("void idUserInterfaceManagerLocal::Reload( bool all )\r\n");
}


void idUserInterfaceManagerLocal::ListGuis() const {
    Sys_Printf("void idUserInterfaceManagerLocal::ListGuis()\r\n");
}


bool idUserInterfaceManagerLocal::CheckGui( const char *qpath ) const {
    bool retVal;
    memset(&retVal, 0, sizeof(bool));
    Sys_Printf("bool idUserInterfaceManagerLocal::CheckGui( const char *qpath )\r\n");
    return retVal;
}


idUserInterface *idUserInterfaceManagerLocal::Alloc( void ) const {
    Sys_Printf("idUserInterface *idUserInterfaceManagerLocal::Alloc( void )\r\n");
    return NULL;
}


void idUserInterfaceManagerLocal::DeAlloc( idUserInterface *gui ) {
    Sys_Printf("void idUserInterfaceManagerLocal::DeAlloc( idUserInterface *gui )\r\n");
}


idUserInterface *idUserInterfaceManagerLocal::FindGui( const char *qpath, bool autoLoad, bool needUnique, bool forceNOTUnique ) {
    Sys_Printf("idUserInterface *idUserInterfaceManagerLocal::FindGui( const char *qpath, bool autoLoad, bool needUnique, bool forceNOTUnique )\r\n");
    return NULL;
}


idUserInterface *idUserInterfaceManagerLocal::FindDemoGui( const char *qpath ) {
    Sys_Printf("idUserInterface *idUserInterfaceManagerLocal::FindDemoGui( const char *qpath )\r\n");
    return NULL;
}


idListGUI *	idUserInterfaceManagerLocal::AllocListGUI( void ) const {
    Sys_Printf("idListGUI *idUserInterfaceManagerLocal::AllocListGUI( void )\r\n");
    return NULL;
}


void idUserInterfaceManagerLocal::FreeListGUI( idListGUI *listgui ) {
    Sys_Printf("void idUserInterfaceManagerLocal::FreeListGUI( idListGUI *listgui )\r\n");
}


/*
===============================================================================

	idUserInterfaceLocal

===============================================================================
*/

idUserInterfaceLocal::idUserInterfaceLocal() {
#ifdef TRACE_CONSTRUCTS
    Sys_DebugPrintf("idUserInterfaceLocal::idUserInterfaceLocal() size %d\r\n", sizeof(*this));
#endif

	cursorX = cursorY = 0.0;
	desktop = NULL;
	loading = false;
	active = false;
	interactive = false;
	uniqued = false;
	bindHandler = NULL;
	//so the reg eval in gui parsing doesn't get bogus values
	time = 0;
	refs = 1;
}

idUserInterfaceLocal::~idUserInterfaceLocal() {
	delete desktop;
	desktop = NULL;
}

const char *idUserInterfaceLocal::Name() const {
    Sys_Printf("char *idUserInterfaceLocal::Name()\r\n");
    return NULL;
}


const char *idUserInterfaceLocal::Comment() const {
    Sys_Printf("char *idUserInterfaceLocal::Comment()\r\n");
    return NULL;
}


bool idUserInterfaceLocal::IsInteractive() const {
    bool retVal;
    memset(&retVal, 0, sizeof(bool));
    Sys_Printf("bool idUserInterfaceLocal::IsInteractive()\r\n");
    return retVal;
}


bool idUserInterfaceLocal::InitFromFile( const char *qpath, bool rebuild, bool cache ) {
    bool retVal;
    memset(&retVal, 0, sizeof(bool));
    Sys_Printf("bool idUserInterfaceLocal::InitFromFile( const char *qpath, bool rebuild, bool cache )\r\n");
    return retVal;
}


const char *idUserInterfaceLocal::HandleEvent( const sysEvent_t *event, int _time, bool *updateVisuals ) {
    Sys_Printf("char *idUserInterfaceLocal::HandleEvent( const sysEvent_t *event, int _time, bool *updateVisuals )\r\n");
    return NULL;
}


void idUserInterfaceLocal::HandleNamedEvent ( const char* eventName ) {
    Sys_Printf("void idUserInterfaceLocal::HandleNamedEvent ( const char* eventName )\r\n");
}


void idUserInterfaceLocal::Redraw( int _time ) {
    Sys_Printf("void idUserInterfaceLocal::Redraw( int _time )\r\n");
}


void idUserInterfaceLocal::DrawCursor() {
    Sys_Printf("void idUserInterfaceLocal::DrawCursor()\r\n");
}


const idDict &idUserInterfaceLocal::State() const {
	return state;
}

void idUserInterfaceLocal::DeleteStateVar( const char *varName ) {
    Sys_Printf("void idUserInterfaceLocal::DeleteStateVar( const char *varName )\r\n");
}


void idUserInterfaceLocal::SetStateString( const char *varName, const char *value ) {
    Sys_Printf("void idUserInterfaceLocal::SetStateString( const char *varName, const char *value )\r\n");
}


void idUserInterfaceLocal::SetStateBool( const char *varName, const bool value ) {
    Sys_Printf("void idUserInterfaceLocal::SetStateBool( const char *varName, const bool value )\r\n");
}


void idUserInterfaceLocal::SetStateInt( const char *varName, const int value ) {
    Sys_Printf("void idUserInterfaceLocal::SetStateInt( const char *varName, const int value )\r\n");
}


void idUserInterfaceLocal::SetStateFloat( const char *varName, const float value ) {
    Sys_Printf("void idUserInterfaceLocal::SetStateFloat( const char *varName, const float value )\r\n");
}


const char* idUserInterfaceLocal::GetStateString( const char *varName, const char* defaultString ) const {
    Sys_Printf("char* idUserInterfaceLocal::GetStateString( const char *varName, const char* defaultString )\r\n");
    return NULL;
}


bool idUserInterfaceLocal::GetStateBool( const char *varName, const char* defaultString ) const {
    bool retVal;
    memset(&retVal, 0, sizeof(bool));
    Sys_Printf("bool idUserInterfaceLocal::GetStateBool( const char *varName, const char* defaultString )\r\n");
    return retVal;
}


int idUserInterfaceLocal::GetStateInt( const char *varName, const char* defaultString ) const {
    int retVal;
    memset(&retVal, 0, sizeof(int));
    Sys_Printf("int idUserInterfaceLocal::GetStateInt( const char *varName, const char* defaultString )\r\n");
    return retVal;
}


float idUserInterfaceLocal::GetStateFloat( const char *varName, const char* defaultString ) const {
    float retVal;
    memset(&retVal, 0, sizeof(float));
    Sys_Printf("float idUserInterfaceLocal::GetStateFloat( const char *varName, const char* defaultString )\r\n");
    return retVal;
}


void idUserInterfaceLocal::StateChanged( int _time, bool redraw ) {
    Sys_Printf("void idUserInterfaceLocal::StateChanged( int _time, bool redraw )\r\n");
}


const char *idUserInterfaceLocal::Activate(bool activate, int _time) {
    Sys_Printf("char *idUserInterfaceLocal::Activate(bool activate, int _time)\r\n");
    return NULL;
}


void idUserInterfaceLocal::Trigger(int _time) {
    Sys_Printf("void idUserInterfaceLocal::Trigger(int _time)\r\n");
}


void idUserInterfaceLocal::ReadFromDemoFile( class idDemoFile *f ) {
    Sys_Printf("void idUserInterfaceLocal::ReadFromDemoFile( class idDemoFile *f )\r\n");
}


void idUserInterfaceLocal::WriteToDemoFile( class idDemoFile *f ) {
    Sys_Printf("void idUserInterfaceLocal::WriteToDemoFile( class idDemoFile *f )\r\n");
}


bool idUserInterfaceLocal::WriteToSaveGame( idFile *savefile ) const {
    bool retVal;
    memset(&retVal, 0, sizeof(bool));
    Sys_Printf("bool idUserInterfaceLocal::WriteToSaveGame( idFile *savefile )\r\n");
    return retVal;
}


bool idUserInterfaceLocal::ReadFromSaveGame( idFile *savefile ) {
    bool retVal;
    memset(&retVal, 0, sizeof(bool));
    Sys_Printf("bool idUserInterfaceLocal::ReadFromSaveGame( idFile *savefile )\r\n");
    return retVal;
}


size_t idUserInterfaceLocal::Size() {
    size_t retVal;
    memset(&retVal, 0, sizeof(size_t));
    Sys_Printf("size_t idUserInterfaceLocal::Size()\r\n");
    return retVal;
}


void idUserInterfaceLocal::RecurseSetKeyBindingNames( idWindow *window ) {
    Sys_Printf("void idUserInterfaceLocal::RecurseSetKeyBindingNames( idWindow *window )\r\n");
}


/*
==============
idUserInterfaceLocal::SetKeyBindingNames
==============
*/
void idUserInterfaceLocal::SetKeyBindingNames( void ) {
    Sys_Printf("void idUserInterfaceLocal::SetKeyBindingNames( void )\r\n");
}


/*
==============
idUserInterfaceLocal::SetCursor
==============
*/
void idUserInterfaceLocal::SetCursor( float x, float y ) {
    Sys_Printf("void idUserInterfaceLocal::SetCursor( float x, float y )\r\n");
}


