
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <math.h>
#include <gccore.h>
#include <wiiuse/wpad.h>

#include "crate_tpl.h"
#include "crate.h"

#define DEFAULT_FIFO_SIZE	(256*1024)


using namespace std;

typedef struct tagtexdef
{
	void *pal_data;
	void *tex_data;
	u32 sz_x;
	u32 sz_y;
	u32 fmt;
	u32 min_lod;
	u32 max_lod;
	u32 min;
	u32 mag;
	u32 wrap_s;
	u32 wrap_t;
	void *nextdef;
} texdef;

static GXRModeObj *rmode = NULL;
static void *frameBuffer[2] = { NULL, NULL};
//static texdef *txdef = (texdef*)crate0_texture;

static GXColor litcolors[] = {
        { 0xFF, 0xFF, 0xFF, 0xFF }, // Light color 1
        { 0x00, 0x00, 0x00, 0x00 }, // Light color 1
//        { 0x00, 0x00, 0x00, 0x00 }, // Ambient 1
        { 0xFF, 0xFF, 0xFF, 0xFF }  // Material 1
};



Vector setlight(Mtx view,f32 theta,f32 phi,f32 dist, GXColor litcol, GXColor ambcol,GXColor matcol)
{
	Vector lpos;
	f32 _theta,_phi;
	GXLightObj lobj;
//dist = 0.0f;
	_theta = (f32)theta*M_PI/180.0f;
	_phi = (f32)phi*M_PI/180.0f;
	lpos.x = dist * cosf(_phi) * sinf(_theta);
	lpos.y = dist * sinf(_phi);
	lpos.z = dist * cosf(_phi) * cosf(_theta);

	guVecMultiply(view,&lpos,&lpos);

	GX_InitLightPos(&lobj,lpos.x,lpos.y,lpos.z);
	GX_InitLightColor(&lobj,litcol);
	GX_InitLightDir(&lobj,-1.0f,0.0f, 0.0f);	
//	GX_InitLightDistAttn(&lobj,100000.0f,00.00f,GX_DA_OFF);
	GX_InitLightAttnA(&lobj, 1.0f, 0.0f, 0.0f);
	GX_InitLightAttnK(&lobj, 1.0f, 0.0f, 0.0f);
//	GX_InitLightSpot(&lobj,89,GX_SP_FLAT);
//	GX_InitLightAttnA(&lobj, -1.0f, 0.0f, 0.0f);
//	GX_InitLightAttnK(&lobj, 10.0f, 0.0f, 0.0f);
	GX_LoadLightObj(&lobj,GX_LIGHT0);
	
	// set number of rasterized color channels
	GX_SetNumChans(1);
    GX_SetChanCtrl(GX_COLOR0,GX_ENABLE,GX_SRC_REG,GX_SRC_REG,GX_LIGHT0,GX_DF_CLAMP,GX_AF_SPOT);
    GX_SetChanCtrl(GX_ALPHA0,GX_ENABLE,GX_SRC_REG,GX_SRC_REG,GX_LIGHT0,GX_DF_CLAMP,GX_AF_SPOT);
//    GX_SetChanCtrl(GX_COLOR0,GX_ENABLE,GX_SRC_REG,GX_SRC_REG,GX_LIGHT0,GX_DF_SIGNED,GX_AF_SPOT);
//   GX_SetChanCtrl(GX_ALPHA0,GX_ENABLE,GX_SRC_REG,GX_SRC_REG,GX_LIGHT0,GX_DF_SIGNED,GX_AF_SPOT);
    GX_SetChanAmbColor(GX_COLOR0A0,ambcol);
    GX_SetChanMatColor(GX_COLOR0A0,matcol);
	
	return lpos;
}

//u8 buf[128*128*2+16];
u8 *buf;
u8 *attntex;
u8 *shades;

int GX_LinearToTiled(int x, int y, int width)
{
	int x0, x1, y0, y1;
	int offset;

	x0 = x & 3;
	x1 = x >> 2;
	y0 = y & 3;
	y1 = y >> 2;
	offset = x0 + 4 * y0 + 16 * x1 + 4 * width * y1;

	return offset;
}


void createLightDirTexRGB565(GXTexObj *texLightDir) {
	u16 texbuf[128*128*2+32];
	s16 x, y;
	float height = 4;
	buf = (u8 *) memalign(32, 128*128*2+16);
	memset(&texbuf[0], 0x00, 128*128*2+16);
	for (y=-32; y<32; y++) {
//		float siny = 1.0f - cosf(((float) y)*M_PI/128.0f);
	u8 i = 64;
		for (x=-32; x<32; x++) {
			float vect_x = -x;
			float vect_y = -y;
/* // radial			
			float lengthInv = 1.0f/sqrtf(vect_x*vect_x+vect_y*vect_y + height*height);
			vect_x = vect_x*lengthInv;
			vect_y = vect_y*lengthInv;
			u8 g = ((u8) (128 + (127.0f * vect_y)))>>2; // ver
			u8 b = ((u8) (128 + (127.0f * vect_x)))>>3; // hor
			texbuf[(x+64) + (y+64)*128] = (g<<5|b);

*/		
			// bulb
			float lengthf = sqrtf(vect_x*vect_x+vect_y*vect_y + height * height);
//			float lengthf = sqrtf(vect_x*vect_x+vect_y*vect_y)/32.0f;
//			if (lengthf > 1) lengthf = 1;
			
			float intensity = 255.0f * height / lengthf;
			if (intensity > 255) intensity = 255;
//			float intensity = 255.0f * cosf(0.5f*M_PI * lengthf);
			
//			float cosy = cosf(0.5f*M_PI * vect_y/64);
//			float intensity = (cosx + cosy) / 2;
			
			u8 r = ((u8) (intensity))>>3; // ver
			u8 g = ((u8) (intensity))>>2; // ver
			u8 b = ((u8) (intensity))>>3; // ver
			texbuf[(x+64) + (y+64)*128] = (r<<11|g<<5|b);
		i++;
		}
	}
	memset(&buf[0], 0, 128*128*2+16);
	u16 *bufptr = (u16 *) ((u8 *)&buf[0]);
//	for(y=0; y<128; y+=1) {
//		for(x=0; x<128; x+=1) {
	for(y=0; y<128; y+=4) {
		for(x=0; x<128; x+=4) {
/*			bufptr[ 0]  = texbuf[x +       y*128];
			bufptr[ 1]  = texbuf[x + 1 + y*128];
			bufptr[ 2]  = texbuf[x +       (y+1)*128];
			bufptr[ 3]  = texbuf[x + 1 + (y+1)*128];

			bufptr[ 4]  = texbuf[x + 2 + y*128];
			bufptr[ 5]  = texbuf[x + 3 + y*128];
			bufptr[ 6]  = texbuf[x + 2 + (y+1)*128];
			bufptr[ 7]  = texbuf[x + 3 + (y+1)*128];

			bufptr[ 8]  = texbuf[x +       (y+2)*128];
			bufptr[ 9]  = texbuf[x + 1 + (y+2)*128];
			bufptr[10] = texbuf[x +       (y+3)*128];
			bufptr[11] = texbuf[x + 1 + (y+3)*128];

			bufptr[12] = texbuf[x + 2 + (y+2)*128];
			bufptr[13] = texbuf[x + 3 + (y+2)*128];
			bufptr[14] = texbuf[x + 2 + (y+3)*128];
			bufptr[15] = texbuf[x + 3 + (y+3)*128];
*/
			bufptr[ 0]  = texbuf[x +       y*128];
			bufptr[ 1]  = texbuf[x + 1 + y*128];
			bufptr[ 2]  = texbuf[x + 2 + y*128];
			bufptr[ 3]  = texbuf[x + 3 + y*128];
			bufptr[ 4]  = texbuf[x +       (y+1)*128];
			bufptr[ 5]  = texbuf[x + 1 + (y+1)*128];
			bufptr[ 6]  = texbuf[x + 2 + (y+1)*128];
			bufptr[ 7]  = texbuf[x + 3 + (y+1)*128];
			bufptr[ 8]  = texbuf[x +       (y+2)*128];
			bufptr[ 9]  = texbuf[x + 1 + (y+2)*128];
			bufptr[10] = texbuf[x + 2 + (y+2)*128];
			bufptr[11] = texbuf[x + 3 + (y+2)*128];
			bufptr[12] = texbuf[x +       (y+3)*128];
			bufptr[13] = texbuf[x + 1 + (y+3)*128];
			bufptr[14] = texbuf[x + 2 + (y+3)*128];
			bufptr[15] = texbuf[x + 3 + (y+3)*128];
			
//			bufptr[GX_LinearToTiled(x, y, 128)] = texbuf[x + y*128];
		
			bufptr +=16; 
		}
	}
	bufptr = (u16 *) &buf[0];

	GX_InitTexObj(texLightDir, (void *) bufptr, 128, 128, GX_TF_RGB565, GX_CLAMP, GX_CLAMP, GX_TRUE);
	GX_InitTexObjLOD(texLightDir,GX_LINEAR,GX_LINEAR, 1, 10, 0.0f, GX_TC_GE, GX_TRUE, GX_ANISO_1);
	DCFlushRange((void *) &bufptr, 128*128*2+32);
//	GX_SetDither(GX_DISABLE);
} 


void createLightAttnTexI8(GXTexObj *texLightDir) {
	u8 texbuf[128*128];
	s16 x, y;
	float height = 4;
	attntex = (u8 *) memalign(32, 128*128);
	memset(&texbuf[0], 0x00, 128*128);
	for (y=-64; y<64; y++) {
		for (x=-64; x<64; x++) {
			float vect_x = -x;
			float vect_y = -y;
			// bulb
			float lengthf = sqrtf(vect_x*vect_x+vect_y*vect_y + height * height);
			
			float intensity = 255.0f * height / lengthf;
			if (intensity > 255) intensity = 255;

			texbuf[(x+64) + (y+64)*128] = intensity;
		}
	}
	memset(&attntex[0], 0x00, 128*128);
	u8 *bufptr = (u8 *) ((u8 *)&attntex[0]);
	

	for(y=0; y<128; y+=4) {
		for(x=0; x<128; x+=8) {
			int xx, yy;
			for (yy=0; yy<4; yy++) {
				for (xx=0; xx<8; xx++) {
					bufptr[xx + yy * 8]  = texbuf[x + xx + (y + yy)*128];
				}
			}
			bufptr += 32; 
		}
	}

	bufptr = (u8 *) &attntex[0];

	GX_InitTexObj(texLightDir, (void *) &attntex[0], 128, 128, GX_TF_I8, GX_CLAMP, GX_CLAMP, GX_TRUE);
	GX_InitTexObjLOD(texLightDir,GX_LINEAR,GX_LINEAR, 1, 10, 0.0f, GX_TC_GE, GX_TRUE, GX_ANISO_1);
	DCFlushRange((void *) bufptr, 128*128);
//	GX_SetDither(GX_DISABLE);
} 



void createLightShadesTexI8(GXTexObj *texLightDir) {
	u8 texbuf[4*1024];
	s16 x, y, precision = 5;
	shades = (u8 *) memalign(32, 4*1024);
	memset(&texbuf[0], 0x00, 4*1024);
	
	for(y=0; y<4; y++) {
		for(x=0; x<1024; x++) {
			float intensity = powf(((float)x)/((float)(1<<precision)), 2);
			if (intensity > 1) intensity = 1;
			u8 fixed = 255 * intensity;
			texbuf[(x) + (y)*1024] = fixed;
		}
	}
	memset(&shades[0], 0, 4*1024);
	
	u8 *bufptr = ((u8 *)&shades[0]);
	for(y=0; y<4; y+=4) {
		for(x=0; x<1024; x+=8) {
			int xx, yy;
			for (yy=0; yy<4; yy++) {
				for (xx=0; xx<8; xx++) {
					bufptr[xx + yy * 8]  = texbuf[x + xx + (y + yy)*1024];
				}
			}
			
			bufptr += 32; 
		}
	}
	bufptr = &shades[0];

	GX_InitTexObj(texLightDir, (void *) bufptr, 1024, 4, GX_TF_I8, GX_CLAMP, GX_CLAMP, GX_TRUE);
	GX_InitTexObjLOD(texLightDir,GX_LINEAR,GX_LINEAR, 1, 10, 0.0f, GX_TC_GE, GX_TRUE, GX_ANISO_1);
	DCFlushRange((void *) bufptr, 1024*4);
} 

void createLightRampTexI8(GXTexObj *texLightDir) {
	u8 texbuf[128*128];
	u8 *attntex;
	s16 x, y;
	attntex = (u8 *) memalign(32, 128*128);
	memset(&texbuf[0], 0x00, 128*128);
	for (y=-64; y<64; y++) {
		for (x=-64; x<64; x++) {
			float vect_x = ((float) x)/64.0f;
			float vect_y = ((float) y)/64.0f;
			// bulb
			float lengthf = vect_x*vect_x+vect_y*vect_y;
			
			float intensity = 255.0f * lengthf;
			if (intensity > 255) intensity = 255;

			texbuf[x+64 + (y+64) * 128] = intensity;
		}
	}
	memset(&attntex[0], 0x00, 128*128);
	u8 *bufptr = (u8 *) ((u8 *)&attntex[0]);

	for(y=0; y<128; y+=4) {
		for(x=0; x<128; x+=8) {
			int xx, yy;
			for (yy=0; yy<4; yy++) {
				for (xx=0; xx<8; xx++) {
					bufptr[xx + yy * 8]  = texbuf[x + xx + (y + yy)*128];
				}
			}
			bufptr += 32; 
		}
	}

	bufptr = (u8 *) &attntex[0];

	GX_InitTexObj(texLightDir, (void *) &attntex[0], 128, 128, GX_TF_I8, GX_CLAMP, GX_CLAMP, GX_TRUE);
	GX_InitTexObjLOD(texLightDir,GX_LINEAR,GX_LINEAR, 1, 10, 0.0f, GX_TC_GE, GX_TRUE, GX_ANISO_1);
	DCFlushRange((void *) bufptr, 128*128);
} 



int main(int argc,char **argv)
{
	u16	buttonState = 0x0000;
	f32 yscale,zt = 0;
	u32 xfbHeight;
	u32 fb = 0;
	f32 rquad = 0.0f;
	u32 first_frame = 1;
	GXTexObj texture;
	GXTexObj light_tex;
	GXTexObj reflectionlight_tex;
	GXTexObj lightdir_tex, attenuatedshades_tex, ramp_tex;
	
	
	Mtx nullMtx = 
		{{ 0.0f,  0.0f,  0.0f,  0.0f},
		 { 0.0f,  0.0f,  0.0f,  0.0f},
		 { 0.0f,  0.0f,  0.0f,  0.0f}};
	Mtx halfMtx = 
		{{ 1.0f,  0.0f,  0.0f,  0.0f},
		 { 0.0f,  1.0f,  0.0f,  0.0f},
		 { 0.0f,  0.0f, -1.0f,  -5.0f}};
	Mtx view; // view and perspective matrices
	Mtx model, modelview, mvi;
	Mtx44 perspective;
	void *gpfifo = NULL;
	GXColor background = {0, 0, 0, 0xff};
	Vector cam = {0.0F, 0.0F, 0.0F},
			up = {0.0F, 1.0F, 0.0F},
		  look = {0.0F, 0.0F, -1.0F};
	TPLFile crateTPL;

	VIDEO_Init();
	WPAD_Init();

	rmode = VIDEO_GetPreferredMode(NULL);

	// allocate the fifo buffer
	gpfifo = memalign(32,DEFAULT_FIFO_SIZE);
	memset(gpfifo,0,DEFAULT_FIFO_SIZE);

	// allocate 2 framebuffers for double buffering
	frameBuffer[0] = SYS_AllocateFramebuffer(rmode);
	frameBuffer[1] = SYS_AllocateFramebuffer(rmode);

	// configure video
	VIDEO_Configure(rmode);
	VIDEO_SetNextFramebuffer(frameBuffer[fb]);
	VIDEO_Flush();
	VIDEO_WaitVSync();
	if(rmode->viTVMode&VI_NON_INTERLACE) VIDEO_WaitVSync();

	fb ^= 1;

	// init the flipper
	GX_Init(gpfifo,DEFAULT_FIFO_SIZE);
 
	// clears the bg to color and clears the z buffer
	GX_SetCopyClear(background, 0x00ffffff);
 
	// other gx setup
	GX_SetViewport(0,0,rmode->fbWidth,rmode->efbHeight,0,1);
	yscale = GX_GetYScaleFactor(rmode->efbHeight,rmode->xfbHeight);
	xfbHeight = GX_SetDispCopyYScale(yscale);
	GX_SetScissor(0,0,rmode->fbWidth,rmode->efbHeight);
	GX_SetDispCopySrc(0,0,rmode->fbWidth,rmode->efbHeight);
	GX_SetDispCopyDst(rmode->fbWidth,xfbHeight);
	GX_SetCopyFilter(rmode->aa,rmode->sample_pattern,GX_TRUE,rmode->vfilter);
	GX_SetFieldMode(rmode->field_rendering,((rmode->viHeight==2*rmode->xfbHeight)?GX_ENABLE:GX_DISABLE));
 
	if (rmode->aa)
        GX_SetPixelFmt(GX_PF_RGB565_Z16, GX_ZC_LINEAR);
    else
        GX_SetPixelFmt(GX_PF_RGB8_Z24, GX_ZC_LINEAR);

	GX_SetCullMode(GX_CULL_BACK);
	GX_CopyDisp(frameBuffer[fb],GX_TRUE);
	GX_SetDispCopyGamma(GX_GM_1_0);

	// setup the vertex attribute table
	// describes the data
	// args: vat location 0-7, type of data, data format, size, scale
	// so for ex. in the first call we are sending position data with
	// 3 values X,Y,Z of size F32. scale sets the number of fractional
	// bits for non float data.
	GX_ClearVtxDesc();
	GX_SetVtxDesc(GX_VA_POS, GX_DIRECT);
	GX_SetVtxDesc(GX_VA_NBT, GX_DIRECT);
	GX_SetVtxDesc(GX_VA_TEX0, GX_DIRECT);
	
	GX_SetVtxAttrFmt(GX_VTXFMT0, GX_VA_POS, GX_POS_XYZ, GX_F32, 0);
	GX_SetVtxAttrFmt(GX_VTXFMT0, GX_VA_NBT, GX_NRM_NBT3, GX_F32, 0);
	GX_SetVtxAttrFmt(GX_VTXFMT0, GX_VA_TEX0, GX_TEX_ST, GX_F32, 0);

    GX_InvVtxCache();
	GX_InvalidateTexAll();
	TPL_OpenTPLFromMemory(&crateTPL, (void *)crate_tpl,crate_tpl_size);
	TPL_GetTexture(&crateTPL, crate, &texture);
	TPL_GetTexture(&crateTPL, light, &light_tex);
	TPL_GetTexture(&crateTPL, reflectionlight, &reflectionlight_tex);
//	createLightDirTexRGB565(&lightdir_tex);
	createLightAttnTexI8(&lightdir_tex);
	createLightShadesTexI8(&attenuatedshades_tex);
	createLightRampTexI8(&ramp_tex);
	// setup our camera at the origin
	// looking down the -z axis with y up
	guLookAt(view, &cam, &up, &look);
 
	// setup our projection matrix
	// this creates a perspective matrix with a view angle of 90,
	// and aspect ratio based on the display resolution
    f32 w = rmode->viWidth;
    f32 h = rmode->viHeight;
	guPerspective(perspective, 45, (f32)w/h, 0.1F, 300.0F);
	GX_LoadProjectionMtx(perspective, GX_PERSPECTIVE);

	Vector cubeAxis[3] = {
		{1,1,0},
		{0,1,0},
		{1,0,1}};

	f32 xxx = 0.0f;
	f32 dir =   0.0f;
	zt = 0.0f;
	rquad = 00.0f;
	u8 mode = 1;
	u8 vsync = 1;
	f32 dst = -0.0f;
	while(1) {

		WPAD_ScanPads();
		if(WPAD_ButtonsDown(0) & WPAD_BUTTON_HOME) exit(0);
		if (WPAD_ButtonsHeld(0)&WPAD_BUTTON_LEFT) zt -= 0.25f;
		if (WPAD_ButtonsHeld(0)&WPAD_BUTTON_RIGHT) zt += 0.25f;
		if (WPAD_ButtonsHeld(0)&WPAD_BUTTON_UP) dir -= 0.25f;
		if (WPAD_ButtonsHeld(0)&WPAD_BUTTON_DOWN) dir += 0.25f;
		
		u32 buttonsHeld = WPAD_ButtonsHeld(0);
		u32 buttonsInv  = buttonsHeld^0xFFFFFFFF;
		if (buttonsHeld&WPAD_BUTTON_A) buttonState |= WPAD_BUTTON_A;
		if (buttonsHeld&WPAD_BUTTON_B) buttonState |= WPAD_BUTTON_B;
		if (buttonsHeld&WPAD_BUTTON_PLUS) buttonState |= WPAD_BUTTON_PLUS;
		if (buttonsHeld&WPAD_BUTTON_MINUS) buttonState |= WPAD_BUTTON_MINUS;


		if (buttonsInv&WPAD_BUTTON_A&buttonState)     { mode^=1; buttonState &= (WPAD_BUTTON_A^0xFFFF);}
		if (buttonsInv&WPAD_BUTTON_B&buttonState)     { mode=1; buttonState &= (WPAD_BUTTON_B^0xFFFF);}
		if (buttonsInv&WPAD_BUTTON_PLUS&buttonState)  { mode^=1; buttonState &= (WPAD_BUTTON_PLUS^0xFFFF);}
		if (buttonsInv&WPAD_BUTTON_MINUS&buttonState) { vsync^=1; buttonState &= (WPAD_BUTTON_MINUS^0xFFFF);}
	

		// set number of rasterized color channels
		GX_SetNumChans(1);
		
		// set the light
		Vector lpos = setlight(view,dir, zt, dst, litcolors[0],litcolors[1],litcolors[2]);
		dst-= 0.005f;
//		dir+= 0.05f;
		if (dir >= 360 ) dir -= 360;
		else if (dir <= 0) dir += 360;
		if (zt >= 360 ) zt -= 360;
		else if (zt <= 0) zt += 360;
		
		
		// ================= SHADER STUFF ================= 

		GX_LoadTexMtxImm(nullMtx, GX_TEXMTX0, GX_MTX3x4);
		GX_LoadTexMtxImm(halfMtx, GX_TEXMTX1, GX_MTX3x4);
//		GX_LoadPosMtxImm(nullMtx, GX_PNMTX1);
//void GX_LoadNrmMtxImm(Mtx mt,u32 pnidx);


	
		// VERTEX SHADER

		GXLightObj camlightobj;
		GX_InitLightPos(&camlightobj, 0.0f, 0.0f, 0.0f);
		GX_InitLightColor(&camlightobj, litcolors[1]);
		GX_LoadLightObj(&camlightobj, GX_LIGHT7);
		
		//set number of textures to generate
		GX_SetNumTexGens(6);
		
/*		Mtx viewInv;
		
		guMtxInverse(view, viewInv);

		Mtx normals =
			{{ 1.0f,  0.0f,  0.0f,  0.0f}, // t
			 { 0.0f,  1.0f,  0.0f,  0.0f}, // b
			 { 0.0f,  0.0f,  1.0f,  0.0f}}; // n
		

		Mtx dttMtx = 
			{{ 0.0f,  0.0f,  0.5f,  0.0f},
			 { 0.0f,  0.0f,  0.5f,  0.0f},
			 { 0.0f,  0.0f,  0.0f,  0.0f}};
		Mtx texMtx = 
//			{{ 0.5f,  0.0f,  0.0f,  lpos.x},
//			 { 0.0f,  0.5f,  0.0f,  lpos.y},
//			 { 0.0f,  0.0f,  1.0f,  lpos.z}};
			{{ 1.0f,  0.0f,  0.0f,  -lpos.x},
			 { 0.0f,  1.0f,  0.0f,   0.0f},
			 { 0.0f,  0.0f,  1.0f,  lpos.z}};
//		GX_LoadTexMtxImm(viewInv, GX_TEXMTX2, GX_MTX3x4);
		GX_LoadTexMtxImm(texMtx, GX_TEXMTX2, GX_MTX3x4);
		GX_LoadTexMtxImm(dttMtx, GX_DTTMTX0, GX_MTX3x4);

*/
		// setup texture coordinate generation
		// args: texcoord slot 0-7, matrix type, source to generate texture coordinates from, matrix to use
		GX_SetTexCoordGen(GX_TEXCOORD0, GX_TG_MTX2x4, GX_TG_TEX0, GX_IDENTITY);
		// text coord 1 renders st = (0, 0) TODO: is it possible to use mtx to render to 0, 0. Safes vertex bandwith
		GX_SetTexCoordGen(GX_TEXCOORD1, GX_TG_MTX2x4, GX_TG_TEX0, GX_TEXMTX0); 
//		GX_SetTexCoordGen(GX_TEXCOORD2, GX_TG_MTX2x4, GX_TG_TEX0, GX_IDENTITY); 
		// text coord 2 renders the bump offset since it uses coord 1 as origin
//		GX_SetTexCoordGen2(GX_TEXCOORD2, GX_TG_MTX3x4, GX_TG_POS, GX_TEXMTX2, GX_FALSE, GX_DTTMTX0);
//		GX_SetTexCoordBias(GX_TEXCOORD2, GX_ENABLE, GX_ENABLE);


//		GX_SetTexCoordGen(GX_TEXCOORD3, GX_TG_MTX2x4, GX_TG_TEX0, GX_TEXMTX0);
//		GX_SetTexCoordGen(GX_TEXCOORD4, GX_TG_BUMP0, GX_TG_TEXCOORD3, GX_IDENTITY);
//		GX_SetTexCoorScaleManually(GX_TEXCOORD2,GX_TRUE,128,128);
		// text coord 3 renders the bump offset related to camera position
//		GX_SetTexCoordGen(GX_TEXCOORD5, GX_TG_BUMP7, GX_TG_TEXCOORD3, GX_IDENTITY);
//		GX_SetTexCoorScaleManually(GX_TEXCOORD5,GX_TRUE,128,128);
		
//		GX_SetTexCoordGen(GX_TEXCOORD5, GX_TG_MTX2x4, GX_TG_TEX0, GX_TEXMTX0); 


		// PIXEL SHADER
//		GX_SetCopyClamp(GX_CLAMP_BOTTOM);
		u8 tevstage = GX_TEVSTAGE0;

/*
		// setup stage 0 to calculate a light scale value which culls out the light when it
		// is behind the surface. 
		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_ONE, GX_CC_RASC, GX_CC_ZERO);
//		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVREG1);
		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_4, GX_TRUE, GX_TEVREG1);
		GX_SetTevOrder(tevstage, GX_TEXCOORDNULL, GX_TEXMAP_DISABLE, GX_COLOR0A0);
		tevstage++;
		
		// ind stage 0 is set up to read normal map from texmap 0 
		GX_SetIndTexOrder(GX_INDTEXSTAGE0,GX_TEXCOORD0,GX_TEXMAP0);
		GX_SetIndTexCoordScale(GX_INDTEXSTAGE0,GX_ITS_1,GX_ITS_1); // normal map texture scale 1:1

		// setup indirect unit for tev stage 0 (for some reason I get a ABGR triplet, so transforms are done on normal map's B and G components)
		f32 offset_mtx[2][3] = {
//			{   0.0f,    0.0f, -0.125f}, // R -> horizontal coordinate (s)
//			{   0.0f, -0.125f,    0.0f}  // G -> vertical coordinate (t)
			{  0.0f, -0.125f,    0.0f}, // B -> horizontal coordinate (s)
			{  0.0f,    0.0f, -0.125f}  // G -> vertical coordinate (t)
//			{ -0.125f,    0.0f,   0.0f}, // B -> horizontal coordinate (s)
//			{    0.0f, -0.125f,   0.0f}  // G -> vertical coordinate (t)
		};
		

		GX_SetNumIndStages(1);
		GX_SetIndTexMatrix(GX_ITM_0,offset_mtx, 0);
		
		GX_SetTevIndirect(
			tevstage, // tevstage 0 is used to combine normal map and lightmap
			GX_INDTEXSTAGE0, // ind stage is used to read normal map
			GX_ITF_8, // texture format 8 bits per channel
			GX_ITB_STU, // use bias on s and t channels (red and green and blue)
			GX_ITM_0, // use 3x2 matrix 0
			GX_ITW_OFF, // do not use texture wrapping
			GX_ITW_OFF, // do not use texture wrapping
			GX_FALSE, // don't add in previous coordinates
			GX_FALSE, // don't use mipmap stuff
			GX_ITBA_OFF // don't use bump alpha (TODO: can this be used to blend reflection and difuse?)
			); 


//		// setup tev stage 1 to lookup the lightmap
		// the texture coordinates used should be the sum of the bump offset coordinates and
		// the indirect lookup associated with it using SetTevIndirect() above.
		GX_SetTevKColorSel(tevstage, GX_TEV_KCSEL_1_8); // ambient intensity
		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_TEXC, GX_CC_C1, GX_CC_KONST); // !!!! check nog ff tevprev 
		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
//		GX_SetTevOrder(tevstage, GX_TEXCOORD2, GX_TEXMAP2, GX_COLORNULL);
//		GX_SetTevColorIn(tevstage, GX_CC_RASC, GX_CC_ZERO, GX_CC_TEXC, GX_CC_ZERO);
//		GX_SetTevColorOp(tevstage, GX_TEV_COMP_A8_GT, GX_TB_ZERO, GX_CS_DIVIDE_2, GX_TC_LINEAR, GX_TEVPREV);
//		GX_SetTevOrder(tevstage, GX_TEXCOORD0, GX_TEXMAP0, GX_COLOR0A0);
		GX_SetTevOrder(tevstage, GX_TEXCOORD4, GX_TEXMAP2, GX_COLOR0A0);
		tevstage++;

		
		// setup tev stage 1 to add reflection. Same theory as above, but light is where the cam is
		if (mode) {
		GX_SetTevIndirect(
			tevstage, // tevstage 0 is used to combine normal map and lightmap
			GX_INDTEXSTAGE0, // ind stage is used to read normal map
			GX_ITF_8, // texture format 8 bits per channel
			GX_ITB_STU, // use bias on s and t channels (red and green and blue)
			GX_ITM_0, // use 3x2 matrix 0
			GX_ITW_OFF, // do not use texture wrapping
			GX_ITW_OFF, // do not use texture wrapping
			GX_TRUE, // add in previous coordinates
			GX_FALSE, // don't use mipmap stuff
			GX_ITBA_OFF // don't use bump alpha (TODO: can this be used to blend reflection and difuse?)
			); 
		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_TEXC, GX_CC_C1, GX_CC_CPREV); // !!!! check nog ff tevprev 
//		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_TEXC, GX_CC_RASC, GX_CC_CPREV); 
		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
//		GX_SetTevOrder(tevstage, GX_TEXCOORD5, GX_TEXMAP1, GX_COLORNULL);
		GX_SetTevOrder(tevstage, GX_TEXCOORD5, GX_TEXMAP1, GX_COLOR0A0);
		tevstage++;
		}


		// setup tev stage 2 to add normal mapped diffuse light
		GX_SetTevIndirect(
			tevstage, // tevstage 0 is used to combine normal map and lightmap
			GX_INDTEXSTAGE0, // ind stage is used to read normal map
			GX_ITF_8, // texture format 8 bits per channel
			GX_ITB_STU, // use bias on s and t channels (red and green and blue)
			GX_ITM_0, // use 3x2 matrix 0
			GX_ITW_OFF, // do not use texture wrapping
			GX_ITW_OFF, // do not use texture wrapping
			GX_FALSE, // don't add in previous coordinates (TODO: are these coordinates or lookup results?)
			GX_FALSE, // don't use mipmap stuff
			GX_ITBA_OFF // don't use bump alpha (TODO: can this be used to blend reflection and difuse?)
			); 
		GX_SetTevKColorSel(tevstage, GX_TEV_KCSEL_1_8);
		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_KONST, GX_CC_TEXC, GX_CC_CPREV);
		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_DIVIDE_2, GX_TRUE, GX_TEVPREV);
		GX_SetTevOrder(tevstage, GX_TEXCOORD5, GX_TEXMAP2, GX_COLORNULL);
		tevstage++;
*/


		// ind stage 0 is set up to read normal map from texmap 0 
		GX_SetIndTexOrder(GX_INDTEXSTAGE0, GX_TEXCOORD2, GX_TEXMAP3);
		GX_SetIndTexOrder(GX_INDTEXSTAGE1, GX_TEXCOORD0, GX_TEXMAP0);
		GX_SetIndTexOrder(GX_INDTEXSTAGE2, GX_TEXCOORD2, GX_TEXMAP3);
		GX_SetIndTexCoordScale(GX_INDTEXSTAGE0, GX_ITS_1, GX_ITS_1); // normal map texture scale 1:1
		GX_SetIndTexCoordScale(GX_INDTEXSTAGE1, GX_ITS_1, GX_ITS_1); // normal map texture scale 1:1
		GX_SetIndTexCoordScale(GX_INDTEXSTAGE2, GX_ITS_1, GX_ITS_1); // normal map texture scale 1:1

		// setup indirect unit for tev stage 0 (for some reason I get a ABGR triplet, so transforms are done on normal map's B and G components)
		f32 offset_mtx[2][3] = {
			{  0.0f, -0.25f,    0.0f}, // B -> horizontal coordinate (s)
			{  0.0f,    0.0f, -0.25f}  // G -> vertical coordinate (t)
//			{  0.0f, -0.125f,    0.0f}, // B -> horizontal coordinate (s)
//			{  0.0f,    0.0f, -0.125f}  // G -> vertical coordinate (t)
		};
		
		f32 mtxLightAttn[2][3] = {
			{  1.0f,    0.0f,    0.0f}, // B -> horizontal coordinate (s)
			{  1.0f,    0.0f,    0.0f}  // G -> vertical coordinate (t)
		};

		GX_SetNumIndStages(3);
		GX_SetIndTexMatrix(GX_ITM_0, offset_mtx, 0);
		GX_SetIndTexMatrix(GX_ITM_1, offset_mtx, 0);
/*
		GX_SetTevIndirect(
			tevstage, // tevstage 0 is used to combine normal map and lightmap
			GX_INDTEXSTAGE0, // ind stage is used to read normal map
			GX_ITF_8, // texture format 8 bits per channel
			GX_ITB_STU, // use bias on s and t channels (red and green and blue)
			GX_ITM_0, // use 3x2 matrix 0
			GX_ITW_OFF, // do not use texture wrapping
			GX_ITW_OFF, // do not use texture wrapping
			GX_FALSE, // don't add in previous coordinates
			GX_FALSE, // don't use mipmap stuff
			GX_ITBA_OFF // don't use bump alpha (TODO: can this be used to blend reflection and difuse?)
			); 
		GX_SetTevOrder(tevstage, GX_TEXCOORD1, GX_TEXMAP_DISABLE, GX_COLORNULL);

		tevstage++;
		
		GX_SetTevIndirect(
			tevstage, // tevstage 0 is used to combine normal map and lightmap
			GX_INDTEXSTAGE1, // ind stage is used to read normal map
			GX_ITF_8, // texture format 8 bits per channel
			GX_ITB_STU, // use bias on s and t channels (red and green and blue)
			GX_ITM_0, // use 3x2 matrix 0
			GX_ITW_OFF, // do not use texture wrapping
			GX_ITW_OFF, // do not use texture wrapping
			GX_TRUE, // don't add in previous coordinates
			GX_FALSE, // don't use mipmap stuff
			GX_ITBA_OFF // don't use bump alpha (TODO: can this be used to blend reflection and difuse?)
			); 

		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_ONE, GX_CC_TEXC, GX_CC_ZERO);
		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
		GX_SetTevOrder(tevstage, GX_TEXCOORD1, GX_TEXMAP2, GX_COLORNULL);

//		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_ONE, GX_CC_TEXC, GX_CC_ZERO);
//		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_DIVIDE_2, GX_TRUE, GX_TEVPREV);
//		GX_SetTevOrder(tevstage, GX_TEXCOORD2, GX_TEXMAP3, GX_COLORNULL);
		tevstage++;
*/	



		// light attenuation
		// attenuation Z
		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_ONE, GX_CC_TEXC, GX_CC_ONE);
		GX_SetTevColorOp(tevstage, GX_TEV_SUB, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
		GX_SetTevOrder(tevstage, GX_TEXCOORD5, GX_TEXMAP5, GX_COLORNULL);
		tevstage++;
		// attenuation XY
		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_ONE, GX_CC_TEXC, GX_CC_CPREV);
		GX_SetTevColorOp(tevstage, GX_TEV_SUB, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
		GX_SetTevOrder(tevstage, GX_TEXCOORD4, GX_TEXMAP5, GX_COLORNULL);
		tevstage++;

		GX_SetTevIndirect(
			tevstage, // tevstage 0 is used to combine normal map and lightmap
			GX_INDTEXSTAGE1, // ind stage is used to read normal map
			GX_ITF_8, // texture format 8 bits per channel
			GX_ITB_STU, // use bias on s and t channels (red and green and blue)
			GX_ITM_0, // use 3x2 matrix 0
			GX_ITW_OFF, // do not use texture wrapping
			GX_ITW_OFF, // do not use texture wrapping
			GX_FALSE, // don't add in previous coordinates
			GX_FALSE, // don't use mipmap stuff
			GX_ITBA_OFF // don't use bump alpha (TODO: can this be used to blend reflection and difuse?)
			); 

		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_CPREV, GX_CC_TEXC, GX_CC_ZERO);
		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
		GX_SetTevOrder(tevstage, GX_TEXCOORD2, GX_TEXMAP3, GX_COLORNULL);
		tevstage++;

/*		GX_SetTevIndirect(
			tevstage, // tevstage 0 is used to combine normal map and lightmap
			GX_INDTEXSTAGE2, // ind stage is used to read normal map
			GX_ITF_8, // texture format 8 bits per channel
			GX_ITB_NONE, // no bias
			GX_ITM_S1, // use 3x2 matrix 0
			GX_ITW_0, // do not use texture wrapping
			GX_ITW_0, // do not use texture wrapping
			GX_FALSE, // don't add in previous coordinates
			GX_FALSE, // don't use mipmap stuff
			GX_ITBA_OFF // don't use bump alpha (TODO: can this be used to blend reflection and difuse?)
			); 

		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_CPREV, GX_CC_TEXC, GX_CC_ZERO);
		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
		GX_SetTevOrder(tevstage, GX_TEXCOORD3, GX_TEXMAP4, GX_COLORNULL);
		tevstage++;
*/

		// stencil layover
//		GX_SetTevColorIn(tevstage, GX_CC_ZERO, GX_CC_ONE, GX_CC_TEXC, GX_CC_ZERO);
//		GX_SetTevColorOp(tevstage, GX_TEV_ADD, GX_TB_ZERO, GX_CS_SCALE_1, GX_TRUE, GX_TEVPREV);
//		GX_SetTevOrder(tevstage, GX_TEXCOORD2, GX_TEXMAP0, GX_COLORNULL);
//		tevstage++;

		// setup number of tev stages
		GX_SetNumTevStages(tevstage);


		// connect textures 
		GX_LoadTexObj(&texture, GX_TEXMAP0); // normal map
		GX_LoadTexObj(&light_tex, GX_TEXMAP1); // light map
		GX_LoadTexObj(&reflectionlight_tex, GX_TEXMAP2); // reflective light map
		GX_LoadTexObj(&lightdir_tex, GX_TEXMAP3); // reflective light map
		GX_LoadTexObj(&attenuatedshades_tex, GX_TEXMAP4); // light map
		GX_LoadTexObj(&ramp_tex, GX_TEXMAP5); // ramp texture

		u8 idx = 0;
		for(idx=1; idx<2; idx++) {
			guMtxIdentity(model);
			guMtxRotAxisDeg(model, &cubeAxis[idx], rquad);
			guMtxTransApply(model, model, -2.0f + (idx * 2.0f), 0.0f,-8.0f - (idx * 2.0f));
//xxx += 0.01f;
//			guMtxTransApply(model, model, -0.0f + (idx * 2.0f), 0.0f,-2 -xxx - (idx * 2.0f));
			guMtxConcat(view,model,modelview);
			// load the modelview matrix into matrix memory

			GX_LoadPosMtxImm(modelview, GX_PNMTX0);
			
//			guMtxInverse(modelview,mvi);
//			guMtxTranspose(mvi,modelview);
			GX_LoadNrmMtxImm(modelview, GX_PNMTX0);
			GX_SetCurrentMtx(GX_PNMTX0);


			Mtx modelViewInv, modelViewTrans;
			Mtx dttMtx;
			Mtx texMtx;
			
			guMtxTranspose(modelview, modelViewTrans);
//			guMtxInverse(modelViewTrans, modelViewInv);
//			guMtxInverse(modelview, modelViewTrans);
//			guMtxTranspose(modelViewTrans, modelViewInv);
			guMtxInverse(modelview, modelViewInv);
//			guMtxTranspose(modelview, modelViewInv);

			Mtx normals =
				{{ 1.0f,  0.0f,  0.0f,  0.0f}, // t
				 { 0.0f,  1.0f,  0.0f,  0.0f}, // b
				 { 0.0f,  0.0f,  1.0f,  0.0f}}; // n
//				{{ 0.0f,  0.0f, -1.0f,  0.0f}, // t
//				 { 0.0f,  1.0f,  0.0f,  0.0f}, // b
//				 { 1.0f,  0.0f,  0.0f,  0.0f}}; // n

			Mtx dttOffsets = 
//				{{ 1.0f,  0.0f,  2.0f * 0.244f * 16.0f,  -0.0f},
//				 { 0.0f,  1.0f,  2.0f * 0.262f * 16.0f,  -0.0f},
//				 { 0.0f,  0.0f,  1.0f * 16.0f,  0.0f}};
				{{ 0.25f,  0.0f,  0.505f * 8.0f,  -0.0f},
				 { 0.0f,  0.25f,  0.505f * 8.0f,  -0.0f},
				 { 0.0f,  0.0f,  	 8.0f,  0.0f}};
				 
			guMtxConcat(dttOffsets, normals, dttMtx);
				 
				 
			guVecMultiply(modelViewInv, &lpos, &lpos);
			Mtx lightMtx = 
	//			{{ 0.5f,  0.0f,  0.0f,  lpos.x},
	//			 { 0.0f,  0.5f,  0.0f,  lpos.y},
	//			 { 0.0f,  0.0f,  1.0f,  lpos.z}};
				{{ 1.0f,  0.0f,  0.0f,  0.0f},
				 { 0.0f,  1.0f,  0.0f,  0.0f},
				 { 0.0f,  0.0f,  1.0f,  0.0f}};

			lightMtx[0][3] = -lpos.x;	 
			lightMtx[1][3] = -lpos.y;	 
			lightMtx[2][3] = -lpos.z;	 
	//		GX_LoadTexMtxImm(viewInv, GX_TEXMTX2, GX_MTX3x4);
//			guMtxConcat(modelViewInv, lightMtx, texMtx);

//			GX_LoadTexMtxImm(texMtx, GX_TEXMTX2, GX_MTX3x4);
			GX_LoadTexMtxImm(lightMtx, GX_TEXMTX2, GX_MTX3x4);
			GX_LoadTexMtxImm(dttMtx, GX_DTTMTX0, GX_MTX3x4);


			Mtx dttStencilScale = 
				{{ 1.0f/1.0f,		0.0f,		0.5f,		0.0f},
				 { 0.0f,		1.0f/1.0f,		0.5f,		0.0f},
				 { 0.0f,		0.0f,		-1.0f,		0.0f}};
			
//			GX_LoadTexMtxImm(modelview, GX_TEXMTX2, GX_MTX3x4);
//			GX_LoadTexMtxImm(dttStencilScale, GX_DTTMTX0, GX_MTX3x4);

			float intensity = 8.0f;
			Mtx dttLightAttn = 
				{{ 0.0f,		0.0f,		0.0f,		intensity},
				 { 0.0f,		0.0f,		0.0f,		0.0f},
				 { 0.0f,		0.0f,		-32.0f,		0.0f}};
			GX_LoadTexMtxImm(dttLightAttn, GX_DTTMTX1, GX_MTX3x4);

			Mtx dttLightAttnXY = 
//				{{ 1.0f,		0.0f,		0.0f,		0.5f * intensity},
//				 { 0.0f,		1.0f,		0.0f,		0.5f * intensity},
//				 { 0.0f,	    0.0f,		0.0f,		intensity}};
				{{ 0.5f,		0.0f,		0.0f,		0.5f * intensity},
				 { 0.0f,		0.5f,		0.0f,		0.5f * intensity},
				 { 0.0f,	    0.0f,		0.0f,		intensity}};
			Mtx dttLightAttnZ = 
				{{ 0.0f,		0.0f,		0.5f,		0.5f * intensity},
				 { 0.0f,		0.0f,		0.0f,		0.5f * intensity},
				 { 0.0f,	    0.0f,		0.0f,		intensity}};
			GX_LoadTexMtxImm(dttLightAttnXY, GX_DTTMTX2, GX_MTX3x4);
			GX_LoadTexMtxImm(dttLightAttnZ, GX_DTTMTX3, GX_MTX3x4);


			GX_SetTexCoordGen2(GX_TEXCOORD2, GX_TG_MTX3x4, GX_TG_POS, GX_TEXMTX2, GX_FALSE, GX_DTTMTX0);
			GX_SetTexCoordGen2(GX_TEXCOORD3, GX_TG_MTX3x4, GX_TG_POS, GX_TEXMTX2, GX_FALSE, GX_DTTMTX1);

			GX_SetTexCoordGen2(GX_TEXCOORD4, GX_TG_MTX3x4, GX_TG_POS, GX_TEXMTX2, GX_FALSE, GX_DTTMTX2); // attenuation XY
			GX_SetTexCoordGen2(GX_TEXCOORD5, GX_TG_MTX3x4, GX_TG_POS, GX_TEXMTX2, GX_FALSE, GX_DTTMTX3); // attenuation Z 
			
//			GX_SetTexCoordGen2(GX_TEXCOORD2, GX_TG_MTX2x4, GX_TG_POS, GX_TEXMTX2, GX_FALSE, GX_DTTMTX0);

//			GX_SetTexCoordGen(GX_TEXCOORD2, GX_TG_MTX2x4, GX_TG_POS, GX_TEXMTX2);//, GX_FALSE, GX_DTTMTX0);


			
		
			GX_Begin(GX_QUADS, GX_VTXFMT0, 24);			// Draw a Cube
//			GX_Begin(GX_QUADS, GX_VTXFMT0, 4);			// Draw a Cube

				// onder
				GX_Position3f32(-2.0f,-2.0f,-2.0f);
				GX_Normal3f32  (   0.0f, -1.0f,   0.0f);
				GX_Normal3f32  (  0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(0.0f,1.0f);

				GX_Position3f32(-2.0f,-2.0f,2.0f);
				GX_Normal3f32  (   0.0f, -1.0f,   0.0f);
				GX_Normal3f32  (  0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(0.0f,0.0f);

				GX_Position3f32(2.0f,-2.0f,2.0f);
				GX_Normal3f32  (   0.0f, -1.0f,   0.0f);
				GX_Normal3f32  (  0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(1.0f,0.0f);

				GX_Position3f32(2.0f,-2.0f,-2.0f);
				GX_Normal3f32  (   0.0f, -1.0f,   0.0f);
				GX_Normal3f32  (  0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(1.0f,1.0f);
				
				// boven
				GX_Position3f32(2.0f,2.0f,-2.0f);
				GX_Normal3f32  (   0.0f,  1.0f,   0.0f);
				GX_Normal3f32  ( -0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(0.0f,1.0f);

				GX_Position3f32(2.0f,2.0f,2.0f);
				GX_Normal3f32  (   0.0f,  1.0f,   0.0f);
				GX_Normal3f32  ( -0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(0.0f,0.0f);

				GX_Position3f32(-2.0f,2.0f,2.0f);
				GX_Normal3f32  (   0.0f,  1.0f,   0.0f);
				GX_Normal3f32  ( -0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(1.0f,0.0f);

				GX_Position3f32(-2.0f,2.0f,-2.0f);
				GX_Normal3f32  (   0.0f,  1.0f,   0.0f);
				GX_Normal3f32  ( -0.125f,  0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,  0.0f,  0.125f);
				GX_TexCoord2f32(1.0f,1.0f);

				// voor
				GX_Position3f32(-2.0f,-2.0f, 2.0f);
				GX_Normal3f32  (   0.0f,   0.0f,  1.0f);
				GX_Normal3f32  (  0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(0.0f,1.0f);

				GX_Position3f32(-2.0f,2.0f,2.0f);
				GX_Normal3f32  (   0.0f,   0.0f,  1.0f);
				GX_Normal3f32  (  0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(0.0f,0.0f);

				GX_Position3f32(2.0f,2.0f,2.0f);
				GX_Normal3f32  (   0.0f,   0.0f,  1.0f);
				GX_Normal3f32  (  0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(1.0f,0.0f);

				GX_Position3f32(2.0f,-2.0f,2.0f);
				GX_Normal3f32  (   0.0f,   0.0f,  1.0f);
				GX_Normal3f32  (  0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(1.0f,1.0f);
				
				// achter
				GX_Position3f32(2.0f,-2.0f,-2.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -1.0f);
				GX_Normal3f32  ( -0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(0.0f,1.0f);

				GX_Position3f32(2.0f,2.0f,-2.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -1.0f);
				GX_Normal3f32  ( -0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(0.0f,0.0f);

				GX_Position3f32(-2.0f,2.0f,-2.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -1.0f);
				GX_Normal3f32  ( -0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(1.0f,0.0f);

				GX_Position3f32(-2.0f,-2.0f,-2.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -1.0f);
				GX_Normal3f32  ( -0.125f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(1.0f,1.0f);
			
				// links
				GX_Position3f32( -2.0f,-2.0f,-2.0f);
				GX_Normal3f32  (  -1.0f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, 0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(0.0f,1.0f);

				GX_Position3f32(-2.0f,2.0f,-2.0f);
				GX_Normal3f32  (  -1.0f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, 0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(0.0f,0.0f);

				GX_Position3f32(-2.0f,2.0f,2.0f);
				GX_Normal3f32  (  -1.0f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, 0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(1.0f,0.0f);

				GX_Position3f32(-2.0f,-2.0f,2.0f);
				GX_Normal3f32  (  -1.0f,   0.0f,  0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, 0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,  0.0f);
				GX_TexCoord2f32(1.0f,1.0f);
					
				// rechts
				GX_Position3f32(2.0f,-2.0f,2.0f);
				GX_Normal3f32  (   1.0f,   0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,   0.0f);
				GX_TexCoord2f32(0.0f,1.0f);

				GX_Position3f32(2.0f,2.0f,2.0f);
				GX_Normal3f32  (   1.0f,   0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,   0.0f);
				GX_TexCoord2f32(0.0f,0.0f);

				GX_Position3f32(2.0f,2.0f,-2.0f);
				GX_Normal3f32  (   1.0f,   0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,   0.0f);
				GX_TexCoord2f32(1.0f,0.0f);

				GX_Position3f32(2.0f,-2.0f,-2.0f);
				GX_Normal3f32  (   1.0f,   0.0f,   0.0f);
				GX_Normal3f32  (   0.0f,   0.0f, -0.125f);
				GX_Normal3f32  (   0.0f,  0.125f,   0.0f);
				GX_TexCoord2f32(1.0f,1.0f);

			GX_End();									// Done Drawing The Quad 
			GX_Flush(); // Flush
		}
		GX_SetAlphaUpdate(GX_TRUE);

		GX_SetZMode(GX_TRUE, GX_LEQUAL, GX_TRUE);
		GX_SetColorUpdate(GX_TRUE);
		GX_CopyDisp(frameBuffer[fb],GX_TRUE);

		GX_DrawDone();

		VIDEO_SetNextFramebuffer(frameBuffer[fb]);
		if(first_frame) {
			first_frame = 0;
			VIDEO_SetBlack(FALSE);
		}
		VIDEO_Flush();
 		if (vsync) VIDEO_WaitVSync();
		fb ^= 1;

//		rquad -= 0.15f;				// Decrease The Rotation Variable For The Quad     ( NEW )
	}
}
